<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:camel="http://camel.apache.org/schema/spring"
  	   xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:broker="http://activemq.apache.org/schema/core"       
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
       		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       		http://camel.apache.org/schema/spring 
       		http://camel.apache.org/schema/spring/camel-spring.xsd
       		http://www.springframework.org/schema/context 
       		http://www.springframework.org/schema/context/spring-context-2.5.xsd
       		http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd">
       		

  <context:component-scan base-package="org.jcanomedina.blog.camel" />
  <bean id="mySlip" class="org.jcanomedina.blog.camel.DynamicRouter"/>
  
  <broker id="broker" brokerName="myBroker" useShutdownHook="false" useJmx="true"
				   persistent="true" dataDirectory="activemq-data"
				   xmlns="http://activemq.apache.org/schema/core">
    <broker:transportConnectors>
      <!-- expose a VM transport for in-JVM transport between AMQ and Camel on the server side -->
      <broker:transportConnector name="brokerURL" uri="vm://myBroker"/>
      <!-- expose a TCP transport for clients to use -->
      <broker:transportConnector name="tcp" uri="tcp://localhost:61616"/>
    </broker:transportConnectors>
  </broker>

  <!-- lets configure the Camel ActiveMQ to use the embedded ActiveMQ broker declared above -->
  <bean id="jms" class="org.apache.activemq.camel.component.ActiveMQComponent">
    <property name="brokerURL" value="vm://myBroker?create=false&amp;waitForStart=5000"/>
  </bean>

  <!-- to uri="jms:queue:profitCompany?exchangePattern=InOnly"/ --><camelContext trace="false" xmlns="http://camel.apache.org/schema/spring">
  <restConfiguration component="spark-rest" bindingMode="json"/>
  <rest path="/company" customId="true" id="rs_company">
    <get uri="/view/{id}" outType="org.jcanomedina.blog.camel.Company">
      <to uri="bean:companyService?method=getCompany(${header.id})"/>
    </get>
    <get uri="/list" outType="org.jcanomedina.blog.camel.Company">
      <to uri="bean:companyService?method=listCompanies"/>
    </get>
    <put uri="/new" type="org.jcanomedina.blog.camel.Company" customId="true" id="newCompany">
      <to uri="direct:start"/>
    </put>
    <get uri="/ratio" outType="Double">
      <to uri="bean:companyService?method=getRatio"/>
    </get>
    <put uri="/ratio" type="Double">
      <to uri="bean:companyService?method=setRatio"/>
    </put>
  </rest>
  <route>
    <from uri="direct:start" id="startNewCompany">
      <description/>
    </from>
    <log message="[startNewCompany] Message: ${body}"/>
    <bean ref="companyService" method="addCompany" beanType="org.jcanomedina.blog.camel.interfaces.ICompanyService"/>
    <dynamicRouter id="debtSelector">
      <method bean="mySlip" ref="mySlip" method="slip"></method>
    </dynamicRouter>
  </route>
  <route>
    <from uri="direct:profitCompany"/>
    <log message="[profitCompany] Input Message: ${body}"/>
    <to uri="jms:queue:profitCompanyInbox"/>
  </route>
  <route>
    <from uri="jms:queue:profitCompanyInbox"/>
    <log message="Routing profitable company from inbox to outbox queue with data ${body}"/>
    <to uri="jms:queue:profitCompanyOutbox?exchangePattern=InOnly"/>
  </route>
  <route>
    <from uri="direct:nonProfitCompany"/>
    <log message="[nonProfitCompany] Input Message: ${body}"/>
    <to uri="jms:queue:nonProfitCompanyInbox"/>
  </route>
  <route>
    <from uri="jms:queue:nonProfitCompanyInbox"/>
    <log message="Routing non-profitable company from inbox to outbox queue with data ${body}"/>
    <to uri="jms:queue:nonProfitCompanyOutbox?exchangePattern=InOnly"/>
  </route>
</camelContext>
</beans> 